package ${beanPackage};

import java.io.File;
import java.io.FileWriter;

import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.streaming.api.functions.sink.RichSinkFunction;
import org.apache.flink.types.Row;

public class WriterSinkFactory{

	public static RichSinkFunction writer(String path) {
		String[] array = path.split(":///");
		if(array[0].equalsIgnoreCase("hdfs")) {
			//hdfs待实现
		}
		
		return new FileWriterSink(array[1]);
	}

}

class FileWriterSink extends RichSinkFunction<Tuple2<Boolean, Row>> {

	private String path;
	
	private FileWriter fileWritter;
	
	public FileWriterSink(String path) {
		this.path = path;
	}

	@Override
	public void open(Configuration parameters) throws Exception {

		File file = new File(path);

		if (file.exists()) {
			file.delete();
		}
		
		if (!file.exists()) {
			file.getParentFile().mkdirs();
			file.createNewFile();
		}

		// true = append file
		fileWritter = new FileWriter(file, true);
	}

	@Override
	public void invoke(Tuple2<Boolean, Row> tuple) throws Exception {

		fileWritter.write(tuple.f1.toString() + "\n");
		
	}

	@Override
	public void close() throws Exception {
		fileWritter.close();
	}

}